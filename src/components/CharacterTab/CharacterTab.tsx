import { CharacterData } from '../../types'
import './CharacterTab.css'

interface Props {
  data: CharacterData
  updateData: (updates: Partial<CharacterData>) => void
}

const faceNames = [
  'Benjamin', 'Daniel', 'Joshua', 'Noah', 'Andrew', 'Joan', 'Alex', 'Isaac', 
  'Evan', 'Ethan', 'Vincent', 'Angel', 'Diego', 'Adrian', 'Gabriel', 'Michael',
  'Santiago', 'Kevin', 'Louis', 'Samuel', 'Anthony', 'Hannah', 'Audrey', 'Jasmine',
  'Giselle', 'Amelia', 'Isabella', 'Zoe', 'Ava', 'Camilla', 'Violet', 'Sophia',
  'Eveline', 'Nicole', 'Ashley', 'Grace', 'Brianna', 'Natalie', 'Olivia', 'Elizabeth',
  'Charlotte', 'Emma', 'Claude', 'Niko', 'John', 'Misty'
]

function CharacterTab(props: Props) {
  const updateValue = (field: keyof CharacterData, value: number, min: number, max: number) => {
    const clampedValue = Math.max(min, Math.min(max, value))
    props.updateData({ [field]: clampedValue })
  }

  const updateFloatValue = (field: keyof CharacterData, value: number, min: number, max: number) => {
    const clampedValue = Math.max(min, Math.min(max, value))
    const roundedValue = Math.round(clampedValue * 100) / 100
    props.updateData({ [field]: roundedValue })
  }

  return (
    <div class="character-section">
      {/* –ü–æ–ª */}
      <div class="section-container">
        <h3 class="section-title">–ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
        <div class="gender-buttons">
          <button
            class={`gender-button ${props.data.gender === 0 ? 'active' : 'inactive'}`}
            onClick={() => props.updateData({ gender: 0 })}
          >
            üë© –ñ–µ–Ω—Å–∫–∏–π
          </button>
          <button
            class={`gender-button ${props.data.gender === 1 ? 'active' : 'inactive'}`}
            onClick={() => props.updateData({ gender: 1 })}
          >
            üë® –ú—É–∂—Å–∫–æ–π
          </button>
        </div>
      </div>

      {/* –ì–µ–Ω–µ—Ç–∏–∫–∞ */}
      <div class="section-container">
        <h3 class="section-title">–ì–µ–Ω–µ—Ç–∏–∫–∞ –∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</h3>
        <div class="section-content">
          {/* –õ–∏—Ü–æ –º–∞—Ç–µ—Ä–∏ */}
          <div class="arrow-control">
            <div class="arrow-control-label">
              –õ–∏—Ü–æ –º–∞—Ç–µ—Ä–∏:
              <div class="slider-control-description">–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞ –æ—Ç –º–∞—Ç–µ—Ä–∏</div>
            </div>
            <div class="arrow-control-buttons">
              <button
                class="arrow-button"
                onClick={() => updateValue('faceMother', props.data.faceMother - 1, 0, 45)}
                disabled={props.data.faceMother <= 0}
              >
                ‚Üê
              </button>
              <div class="arrow-control-value">
                {faceNames[props.data.faceMother] || `#${props.data.faceMother}`}
              </div>
              <button
                class="arrow-button"
                onClick={() => updateValue('faceMother', props.data.faceMother + 1, 0, 45)}
                disabled={props.data.faceMother >= 45}
              >
                ‚Üí
              </button>
            </div>
          </div>

          {/* –õ–∏—Ü–æ –æ—Ç—Ü–∞ */}
          <div class="arrow-control">
            <div class="arrow-control-label">
              –õ–∏—Ü–æ –æ—Ç—Ü–∞:
              <div class="slider-control-description">–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞ –æ—Ç –æ—Ç—Ü–∞</div>
            </div>
            <div class="arrow-control-buttons">
              <button
                class="arrow-button"
                onClick={() => updateValue('faceFather', props.data.faceFather - 1, 0, 45)}
                disabled={props.data.faceFather <= 0}
              >
                ‚Üê
              </button>
              <div class="arrow-control-value">
                {faceNames[props.data.faceFather] || `#${props.data.faceFather}`}
              </div>
              <button
                class="arrow-button"
                onClick={() => updateValue('faceFather', props.data.faceFather + 1, 0, 45)}
                disabled={props.data.faceFather >= 45}
              >
                ‚Üí
              </button>
            </div>
          </div>

          {/* –ö–æ–∂–∞ –º–∞—Ç–µ—Ä–∏ */}
          <div class="arrow-control">
            <div class="arrow-control-label">
              –ö–æ–∂–∞ –º–∞—Ç–µ—Ä–∏:
              <div class="slider-control-description">–¢–æ–Ω –∫–æ–∂–∏ –æ—Ç –º–∞—Ç–µ—Ä–∏</div>
            </div>
            <div class="arrow-control-buttons">
              <button
                class="arrow-button"
                onClick={() => updateValue('skinMother', props.data.skinMother - 1, 0, 45)}
                disabled={props.data.skinMother <= 0}
              >
                ‚Üê
              </button>
              <div class="arrow-control-value">
                {faceNames[props.data.skinMother] || `#${props.data.skinMother}`}
              </div>
              <button
                class="arrow-button"
                onClick={() => updateValue('skinMother', props.data.skinMother + 1, 0, 45)}
                disabled={props.data.skinMother >= 45}
              >
                ‚Üí
              </button>
            </div>
          </div>

          {/* –ö–æ–∂–∞ –æ—Ç—Ü–∞ */}
          <div class="arrow-control">
            <div class="arrow-control-label">
              –ö–æ–∂–∞ –æ—Ç—Ü–∞:
              <div class="slider-control-description">–¢–æ–Ω –∫–æ–∂–∏ –æ—Ç –æ—Ç—Ü–∞</div>
            </div>
            <div class="arrow-control-buttons">
              <button
                class="arrow-button"
                onClick={() => updateValue('skinFather', props.data.skinFather - 1, 0, 45)}
                disabled={props.data.skinFather <= 0}
              >
                ‚Üê
              </button>
              <div class="arrow-control-value">
                {faceNames[props.data.skinFather] || `#${props.data.skinFather}`}
              </div>
              <button
                class="arrow-button"
                onClick={() => updateValue('skinFather', props.data.skinFather + 1, 0, 45)}
                disabled={props.data.skinFather >= 45}
              >
                ‚Üí
              </button>
            </div>
          </div>

          {/* –°—Ö–æ–∂–µ—Å—Ç—å –ª–∏—Ü–∞ */}
          <div class="slider-control">
            <div class="slider-control-header">
              <div class="slider-control-label">–°—Ö–æ–∂–µ—Å—Ç—å –ª–∏—Ü–∞:</div>
              <div class="slider-control-value">{props.data.faceMix.toFixed(1)}</div>
            </div>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={props.data.faceMix}
              class="character-slider"
              onInput={(e) => updateFloatValue('faceMix', Math.round(parseFloat(e.currentTarget.value) * 10) / 10, 0, 1)}
            />
            <div class="slider-control-description">
              –í–ª–µ–≤–æ - –±–æ–ª—å—à–µ –æ—Ç –º–∞—Ç–µ—Ä–∏, –í–ø—Ä–∞–≤–æ - –±–æ–ª—å—à–µ –æ—Ç –æ—Ç—Ü–∞
            </div>
          </div>

          {/* –°—Ö–æ–∂–µ—Å—Ç—å –∫–æ–∂–∏ */}
          <div class="slider-control">
            <div class="slider-control-header">
              <div class="slider-control-label">–°—Ö–æ–∂–µ—Å—Ç—å –∫–æ–∂–∏:</div>
              <div class="slider-control-value">{props.data.skinMix.toFixed(1)}</div>
            </div>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={props.data.skinMix}
              class="character-slider"
              onInput={(e) => updateFloatValue('skinMix', Math.round(parseFloat(e.currentTarget.value) * 10) / 10, 0, 1)}
            />
            <div class="slider-control-description">
              –í–ª–µ–≤–æ - —Ç–æ–Ω –º–∞—Ç–µ—Ä–∏, –í–ø—Ä–∞–≤–æ - —Ç–æ–Ω –æ—Ç—Ü–∞
            </div>
          </div>
        </div>
      </div>

      {/* –ì–ª–∞–∑–∞ */}
      <div class="section-container">
        <h3 class="section-title">–¶–≤–µ—Ç –≥–ª–∞–∑</h3>
        <div class="arrow-control">
          <div class="arrow-control-label">
            –¶–≤–µ—Ç –≥–ª–∞–∑:
            <div class="slider-control-description">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≥–ª–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</div>
          </div>
          <div class="arrow-control-buttons">
            <button
              class="arrow-button"
              onClick={() => updateValue('eyes', props.data.eyes - 1, 0, 31)}
              disabled={props.data.eyes <= 0}
            >
              ‚Üê
            </button>
            <div class="arrow-control-value">
              –¶–≤–µ—Ç #{props.data.eyes}
            </div>
            <button
              class="arrow-button"
              onClick={() => updateValue('eyes', props.data.eyes + 1, 0, 31)}
              disabled={props.data.eyes >= 31}
            >
              ‚Üí
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CharacterTab